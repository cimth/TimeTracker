<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:converters="clr-namespace:TimeTracker.Converters"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!-- Converters -->
    <converters:EntryToTotalTimeSumConverter x:Key="EntryToTotalTimeSumConverter" />
    
    <!-- Cell style for the basic data grid -->
    <Style x:Key="BasicDataGridCellStyle" TargetType="{x:Type DataGridCell}">
        <Style.Triggers>
            <!-- IsSelected -->
            <Trigger Property="DataGridCell.IsSelected" Value="True">
                <Setter Property="Foreground" Value="Black" />
                <Setter Property="Background" Value="{StaticResource AppSelectedLightBrush}" />
                <Setter Property="BorderThickness" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Group all Entries by the week of their start date -->
    <Style x:Key="WeekGroup" TargetType="{x:Type GroupItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <!-- Summarize each group in an Expander -->
                    <Expander IsExpanded="True" 
                              Background="{StaticResource GroupHeaderBrush}"
                              HorizontalAlignment="Stretch">
                        <!-- Header -->
                        <Expander.Header>
                            <Grid>
                                <!-- Left side -->
                                <StackPanel Orientation="Horizontal">
                                    <!-- Week -->
                                    <TextBlock Text="{DynamicResource Str_Week}" />
                                    <TextBlock Text=": " />
                                    <TextBlock Text="{Binding Name}"
                                               FontWeight="Bold"/>
                                    
                                    <!-- Separator -->
                                    <TextBlock Text=" | " />
                                    
                                    <!-- Total Time -->
                                    <TextBlock Text="{DynamicResource Str_EntryTotalTime}" />
                                    <TextBlock Text=": " />
                                    <TextBlock FontWeight="Bold">
                                        <TextBlock.Text>
                                            <!-- Bind to the actual needed Items object and to Items.Count (though not needed)
                                             to notice changes on the groups after updating an Entry.
                                             See: https://stackoverflow.com/questions/53940895/datagrid-group-header-not-updating-on-new-record -->
                                            <MultiBinding Converter="{StaticResource EntryToTotalTimeSumConverter}">
                                                <Binding Path="Items" />
                                                <Binding Path="Items.Count" />
                                            </MultiBinding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                    
                                </StackPanel>
                            </Grid>
                        </Expander.Header>
                        
                        <!-- Content (i.e. the actual rows of the Entries) -->
                        <ItemsPresenter />
                    </Expander>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Buttons -->
    <Style x:Key="Button" TargetType="{x:Type Button}">
        <!-- Default state -->
        <!-- Note: The Template has to be overwritten for changing the IsChecked color etc. -->
        <Setter Property="Background" Value="{StaticResource AppLightBrush}" />
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            Margin="{TemplateBinding Margin}" >
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
        <!-- Overwrite on different states. -->
        <Style.Triggers>
            <!-- IsMoueOver -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource AppHighlightedBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="ToggleButton" TargetType="{x:Type ToggleButton}">
        <!-- Default state -->
        <!-- Note: The Template has to be overwritten for changing the IsChecked color etc. -->
        <Setter Property="Background" Value="{StaticResource AppLightBrush}" />
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            Margin="{TemplateBinding Margin}" >
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
        <!-- Overwrite on different states. -->
        <Style.Triggers>
            <!-- IsMoueOver -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource AppHighlightedBrush}" />
            </Trigger>
            
            <!-- IsChecked -->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{StaticResource AppSelectedMediumBrush}" />
            </Trigger>
            
            <!-- IsMoueOver AND IsChecked -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                
                <Setter Property="Background" Value="{StaticResource AppHighlightedBrush}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    
    <!-- Multiple times used styles -->
    <Style x:Key="Column" TargetType="{x:Type FrameworkElement}">
        <Setter Property="Margin" Value="5" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    
    <Style x:Key="ColumnCentered" TargetType="{x:Type FrameworkElement}"
           BasedOn="{StaticResource Column}">
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>
    
    <Style x:Key="ColumnButton" TargetType="{x:Type Button}"
           BasedOn="{StaticResource Button}">
        <!-- Add 'Column' style -->
        <Setter Property="Margin" Value="5" />
        <Setter Property="VerticalAlignment" Value="Center" />
        
        <!-- Add 'ColumnButton' style -->
        <Setter Property="Padding" Value="10, 5" />
    </Style>
    
</ResourceDictionary>